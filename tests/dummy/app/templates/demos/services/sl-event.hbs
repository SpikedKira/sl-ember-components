<h2>Service: sl-event</h2>
<p class="lead">
    This service handles custom app-level event listening and triggering.
</p>

<p>The sl-event service is used to communicate basic events with data between Ember objects. Any object can listen for a custom event, and any other objects can trigger that event, which will in turn trigger code for each object listening for the event.</p>

<section>
    <h3>Listening for Events</h3>

    <p>The <code>listen()</code> method on the service is used to setup the event binding to the listening object. The object will then respond to the custom event like any other Ember event.</p>

    <p>In the example below, the component sets up a reference to the sl-event service, calls <code>listen()</code> with the name of the custom event it's listening for and a reference to itself, then binds a response to trigger <code>sayHello()</code> when it receives the custom event.</p>

    <pre>Ember.Component.extend({
    eventService: Ember.inject.service( 'sl-event' ),

    initialize: Ember.on( 'init', function() {
        this.get( 'eventService' ).listen( 'demo.sayHello', this );
    }),

    sayHello: Ember.on( 'demo.sayHello', function( name ) {
        window.alert( `Hello ${name}!` );
    })
});</pre>
</section>

<section>
    <h3>Triggering Events</h3>

    <p>To trigger an event through the service, an object can call <code>trigger()</code> with the name of the custom event, along with an optional data parameter to be passed along with the event. All objects listening for the custom event will be triggered and passed the data.</p>

    <p>In the example below, a controller first injects a reference to the sl-event service, then calls <code>trigger()</code> with the custom event name and a piece of data it handles.</p>

    <pre>Ember.Controller.extend({
    eventService: Ember.inject.service( 'sl-event' ),

    greet( name ) {
        this.get( 'eventService' ).trigger( 'demo.sayHello', name );
    }
});</pre>
</section>

<section>
    <h3>Unlistening for Events</h3>

    <p>When an object should no longer be listening for a custom event, it can call the <code>unlisten()</code> method on the sl-event service, passing in the name of the custom event and a reference to itself.</p>

    <p>The below example continues the component example from <strong>Listening for Events</strong> to unbind the listening action made in that section, when the component is being destroyed.</p>

    <pre>Ember.Component.extend({
    // ...

    teardown: Ember.on( 'willDestroyElement', function() {
        this.get( 'eventService' ).unlisten( 'demo.sayHello', this );
    })
});</pre>
</section>

<section>
    <h3>Mixin: sl-evented</h3>

    <p>Instead of having to inject the service, and use <code>listen()</code> and <code>unlisten()</code> to pass through references of the object you're implementing, you can instead use <strong>mixins/sl-evented</strong> for access to the following methods:</p>

    <ul>
        <li><strong>listenFor</strong>( <em>eventName</em> ) - Add a listener for the <em>eventName</em> to this object</li>
        <li><strong>unlistenFor</strong>( <em>eventName</em> ) - Remove a listener for the <em>eventName</em> to this object</li>
    </ul>

    <p>These methods are simply shortcuts, and allow you to replace all of the component code in the above examples with:</p>

    <pre>Ember.Component.extend( SlEventedMixin, {
    initialize: Ember.on( 'init', function() {
        this.listenFor( 'demo.sayHello' );
    }),

    sayHello: Ember.on( 'demo.sayHello', function( name ) {
        window.alert( `Hello ${name}!` );
    }),

    teardown: Ember.on( 'willDestroyElement', function() {
        this.unlistenFor( 'demo.sayHello' );
    })
});</pre>

</section>
